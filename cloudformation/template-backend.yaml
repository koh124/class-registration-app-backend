Parameters:
  StageName:
    Description: stage name
    Type: String
    Default: STG
    AllowedValues:
      - STG
      - PRD

  ECRRepositoryName:
    Description: ecr repository name
    Type: String
    Default: nest-app

  # ECRImageUrl:
  #   Description: Image url of ECR
  #   Type: String
  #   # ECRから
  #   Default: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepositoryName}:latest

  FargateContainerPort:
    Description: container port number of Fargate task
    Type: Number
    Default: 3000

Resources:
  # VPCネットワークを構築
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  # 公開サブネット
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: ap-northeast-1a

  # 公開サブネットは最低2つ必要（Fargateタスクを分散配置する）
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: ap-northeast-1c

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  # インターネットゲートウェイをVPCに関連付ける
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # 公開サブネット用のルートテーブルを作成する
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  # 公開サブネット用のルートテーブルで、
  # IGW → インターネット全体へのルートを作る
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      GatewayId: !Ref InternetGateway
      DestinationCidrBlock: "0.0.0.0/0"

  PublicRoute2:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable2
      GatewayId: !Ref InternetGateway
      DestinationCidrBlock: "0.0.0.0/0"

  # 公開サブネットとルートテーブルの明示的な関連付けを行う
  # ルートテーブルには、"明示的なサブネットの関連付けと、明示的でないサブネットの関連付けがある
  # 明示的な関連づけを行わないと、サブネットはデフォルトでメインルートテーブルと関連づけられる
  PublicSubnetRouteTableAssociations:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociations:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable2

  # プライベートサブネット
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      # 異なるCIDRブロックにVPCを配置する
      CidrBlock: 10.0.2.0/24
      # このサブネットで起動されるEC2インスタンスが、自動で公開IPを取得しないようにする
      MapPublicIpOnLaunch: false
      # 異なるアベイラビリティゾーンに配置する
      AvailabilityZone: ap-northeast-1a

  # VPCにもう一つプライベートサブネットを作成する（RDSのマルチAZ構成で必要）
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: false
      AvailabilityZone: ap-northeast-1c

  SecurityGroupForELB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable Access from Internet
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  SecurityGroupForFargate:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable Public access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !Ref SecurityGroupForELB
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          # SourceSecurityGroupId: !Ref SecurityGroupForRDS
          CidrIp: 0.0.0.0/0

  SecurityGroupForRDS:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable MySQL access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref SecurityGroupForFargate

  NatEip:
    Type: AWS::EC2::EIP

  NatEip2:
    Type: AWS::EC2::EIP

  # NATゲートウェイは公開サブネットに配置され、プライベートサブネットのRDS → パブリックサブネットのFargateに接続する入口を作る
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEip.AllocationId
      # NatEIPとNATGatewayはマルチAZ構成にすることで、冗長化できる
      SubnetId: !Ref PublicSubnet

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEip2.AllocationId
      SubnetId: !Ref PublicSubnet2

  # プライベートサブネット用のルートテーブルを作成する
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  # プライベートサブネット用のルートを作成
  # プライベートサブネット内からのアウトバウンド接続を、公開サブネットのNATゲートウェイに転送させるルートを作る
  # NATゲートウェイを通ってFargateタスクにアウトバウンド接続する
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      NatGatewayId: !Ref NatGateway
      DestinationCidrBlock: "0.0.0.0/0"

  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      NatGatewayId: !Ref NatGateway2
      DestinationCidrBlock: "0.0.0.0/0"

  # プライベートサブネットとプライベートサブネット用のルートテーブルで明示的な関連付けを行う
  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  # ---------- ECS ----------

  # ECRIAMRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: "Allow"
  #           Principal:
  #             Service: "ecs-tasks.amazonaws.com"
  #           Action: "sts:AssumeRole"
  #     Policies:
  #       - PolicyName: "ECRAccessPolicy"
  #         PolicyDocument:
  #           Version: "2012-10-17"
  #           Statement:
  #             - Effect: "Allow"
  #               Action:
  #                 - "ecr:GetAuthorizationToken"
  #                 - "ecr:BatchCheckLayerAvailability"
  #                 - "ecr:BatchGetImage"
  #                 - "ecr:DescribeImages"
  #               Resource: "*"

  # ECRRepository:
  #   Type: AWS::ECR::Repository
  #   Properties:
  #     RepositoryName: nest-app

  # ECSクラスターを作成する
  ECSCluster:
    Type: "AWS::ECS::Cluster"

  # ECSタスクの実行ロールを作成する
  # ECSTaskExecutionRole:
  #   Type: 'AWS::IAM::Role'
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: 'Allow'
  #           Principal:
  #             Service:
  #               - 'ecs-tasks.amazonaws.com'
  #           Action:
  #             - 'sts:AssumeRole'
  #     Policies:
  #       - PolicyName: 'ECSExecutionPolicy'
  #         PolicyDocument:
  #           Version: '2012-10-17'
  #           Statement:
  #             - Effect: 'Allow'
  #               Action:
  #                 - 'ecs:Describe*'
  #                 - 'ecs:List*'
  #                 - 'ecr:GetAuthorizationToken'
  #                 - 'ecr:BatchCheckLayerAvailability'
  #                 - 'ecr:GetDownloadUrlForLayer'
  #                 - 'logs:CreateLogStream'
  #                 - 'logs:PutLogEvents'
  #               Resource: '*'

  # FargateTaskRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: ecs-tasks.amazonaws.com
  #           Action: "sts:AssumeRole"
  #     Policies:
  #       - PolicyName: ECRPolicy
  #         AssumeRolePolicyDocument:
  #           Version: "2012-10-17"
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - ecr:GetAuthorizationToken
  #                 - ecr:BatchCheckLayerAvailability
  #                 - ecr:BatchGetImage
  #                 - ecr:DescribeImages
  #               Resource: "*"

  # タスク定義を作成する
  ECSTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      Family: "ecs-family"
      Cpu: "1024"
      Memory: "4096"
      NetworkMode: "awsvpc"
      RequiresCompatibilities:
        - "FARGATE"
      # 今回はデフォルトで作成されている実行ロールを使う
      ExecutionRoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/ecsTaskExecutionRole"
      # ExecutionRoleArn: !Ref ECSTaskExecutionRole
      # TaskRoleArn: !Ref ECRIAMRole
      ContainerDefinitions:
        - Name: nest-app-server
          # Image: !Ref ECRRepository
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepositoryName}:latest
          PortMappings:
            - ContainerPort: !Ref FargateContainerPort
          Essential: true
          Environment:
            # STG, PRD, どちらの場合でもコンテナのデータベースエンドポイントはRDSを指定する
            - Name: DATABASE_URL
              Value: !Sub mysql://admin:password@${RDSInstance}:3306/class_registration_app?schema=public
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/nest-app-server
              awslogs-region: ${AWS::Region}
              awslogs-stream-prefix: my-container


  # ECSサービスを作成する
  Service:
    Type: "AWS::ECS::Service"
    Properties:
      Cluster: !Ref ECSCluster
      # 起動タイプはFargate
      LaunchType: "FARGATE"
      TaskDefinition: !Ref ECSTaskDefinition
      # タスクは常に2体を維持する
      DesiredCount: 2
      NetworkConfiguration:
        AwsvpcConfiguration:
          # パブリックIPアドレスを割り当てる
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref PublicSubnet
            - !Ref PublicSubnet2
          SecurityGroups:
            - !Ref SecurityGroupForFargate
      # ロードバランサーと統合する
      LoadBalancers:
        - TargetGroupArn: !Ref TargetGroup
          ContainerName: nest-app-server
          ContainerPort: !Ref FargateContainerPort

  # RDSのサブネットグループを作成する
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds:
        - !Ref PrivateSubnet
        - !Ref PrivateSubnet2

  # ---------- RDS ----------

  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: '20'
      # インスタンスタイプの指定
      DBInstanceClass: db.t2.micro
      # パブリックアクセスを無効にする
      PubliclyAccessible: false
      # データベースはMySQLを使用
      Engine: mysql
      # 管理者のユーザー名とパスワードを設定
      # AWS Secrets Manager や AWS Systems Manager Parameter Store などで管理することが推奨される
      MasterUsername: admin
      MasterUserPassword: password
      # セキュリティグループとRDSサブネットグループを関連付ける
      VPCSecurityGroups:
        - !Ref SecurityGroupForRDS
      # RDSインスタンスはサブネットグループ内のサブネットにデプロイされる
      DBSubnetGroupName: !Ref DBSubnetGroup
      # マルチAZ構成が成立する条件
      # - 異なるAZに位置するパブリックサブネットがある
      # - RDSのサブネットグループに2つ以上のサブネットが含まれている
      MultiAZ: false

  # ---------- ELB ----------

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: coda-load-balancer
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref SecurityGroupForELB

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: LoadBalancer
    Properties:
      Name: coda-target-group
      VpcId: !Ref VPC
      Protocol: HTTP
      Port: 3000
      HealthCheckProtocol: HTTP
      HealthCheckPort: "3000"
      HealthCheckPath: '/'
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetType: ip
      LoadBalancerArns:
        - !Ref LoadBalancer

  LoadBalancerListerner:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - LoadBalancer
      - TargetGroup
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

Outputs:
  RDSInstanceEndpoint:
    Description: Endpoint of the RDS instance
    Value: !GetAtt [RDSInstance, Endpoint.Address]

  MySQLEndpoint:
    Description: Try out connecting to the MySQL instance
    Value: !Sub
        - "mysql -h ${EndpointAddress} -P 3306 -u admin -p"
        - EndpointAddress: !GetAtt [RDSInstance, Endpoint.Address]
